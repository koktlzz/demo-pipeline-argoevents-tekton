apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: init-pipeilne
  namespace: argo-events
spec:
  template:
    serviceAccountName: argo-events-sa
  dependencies:
    - name: gitlab-dep-push
      eventSourceName: gitlab
      eventName: demo-user-project
      transform:
        script: |-
          # pipeline files: https://github.com/lanbingcloud/demo-user-project/tree/main/pipelines
          if event.body.ref == "refs/heads/master" then
            event.body.pipeline='pipelines/test-pipeline.yaml'
          elseif event.body.ref == "refs/heads/dev" then
            event.body.pipeline='pipelines/dev-pipeline.yaml'
          end
          return event
  triggers:
    - template:
        name: init-pipeine
        k8s:
          operation: create
          source:
            resource:
              apiVersion: tekton.dev/v1beta1
              kind: PipelineRun
              metadata:
                generateName: init-pipiline-
                namespace: user-pipelines
              spec:
                params:
                - name: REVISION
                  value: master
                - name: PIPELINE
                  value: pipelines/test-pipeline.yaml
                pipelineSpec:
                  params:
                    - name: REVISION
                      type: string
                      description: Revision to checkout. (branch, tag, sha, ref, etc...)
                      default: ""
                    - name: PIPELINE
                      type: string
                      description: pipeline file.
                      default: "pipelines/pipeline.yaml"
                  tasks:
                  - name: git-clone
                    taskRef:
                      name: git-clone
                      kind: ClusterTask
                    workspaces:
                    - name: output
                      workspace: source-volume
                      subPath: $(params.REVISION)
                    - name: ssh-directory
                      workspace: git-credentials
                    params:
                    - name: url
                      value: git@your.gitlab.com:koktlzz/demo-user-project.git
                    - name: sparseCheckoutDirectories
                      value: $(params.PIPELINE)
                    - name: revision
                      value: $(params.REVISION)
                    - name: sslVerify
                      value: false
                  - name: pipeline-run
                    runAfter:
                    - git-clone
                    taskRef:
                      name: kubernetes-actions
                      kind: ClusterTask
                    params:
                      - name: image
                        value: gcriocloudbuilders/kubectl:latest
                      - name: script
                        value: |
                          COMMIT=$(tasks.git-clone.results.commit)
                          SHORT_SHA=${COMMIT: 0: 8}
                          SUFFIX=`openssl rand -hex 2`
                          REF=$(params.REVISION)
                          BRANCH=${REF/refs\/heads\//}
                          cat >./kustomization.yaml <<EOF
                          apiVersion: kustomize.config.k8s.io/v1beta1
                          kind: Kustomization
                          resources:
                          - $(params.PIPELINE)
                          commonLabels:
                            branch: $BRANCH
                          patches:
                          - patch: |-
                              - op: replace
                                path: /spec/params/0/value
                                value: $(params.REVISION)
                            target:
                              kind: PipelineRun
                          nameSuffix: -$SHORT_SHA-$SUFFIX
                          EOF
                          cat ./kustomization.yaml
                          kubectl apply -k ./
                    workspaces:
                    - name: manifest-dir
                      workspace: source-volume
                      subPath: $(params.REVISION)
                  workspaces:
                  - name: source-volume
                  - name: git-credentials
                podTemplate:
                  securityContext:
                    fsGroup: 65532
                workspaces:
                - name: source-volume
                  persistentVolumeClaim:
                    claimName: source-pvc
                - name: git-credentials
                  secret:
                    secretName: gitlab-ssh-credentials
          parameters:
            - src:
                dependencyName: gitlab-dep-push
                dataKey: body.ref
              dest: spec.params.0.value
            - src:
                dependencyName: gitlab-dep-push
                dataKey: body.pipeline
              dest: spec.params.1.value
